[{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":5,"column":44},"end":{"line":17,"column":9}},"range":[186,567],"testsRan":["Array Group By grouping an empty array should return empty result","Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated"],"originalLines":"        this.forEach(function (item, index) {\r\n            var key = keySelector(item, index);\r\n            var keyItem = result.find(function (r) { return r.key === key; });\r\n            if (!keyItem) {\r\n                result.push({\r\n                    key: key,\r\n                    items: [item]\r\n                });\r\n            }\r\n            else {\r\n                keyItem.items.push(item);\r\n            }\r\n        });","mutatedLines":"        this.forEach(function (item, index) {\n});"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":1,"column":30},"end":{"line":20,"column":1}},"range":[30,604],"testsRan":["Array Group By grouping an empty array should return empty result","Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated","Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)","Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"if (!Array.prototype.groupBy) {\r\n    Array.prototype.groupBy = function (keySelector) {\r\n        var result = [];\r\n        var array = this;\r\n        this.forEach(function (item, index) {\r\n            var key = keySelector(item, index);\r\n            var keyItem = result.find(function (r) { return r.key === key; });\r\n            if (!keyItem) {\r\n                result.push({\r\n                    key: key,\r\n                    items: [item]\r\n                });\r\n            }\r\n            else {\r\n                keyItem.items.push(item);\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n}","mutatedLines":"if (!Array.prototype.groupBy) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":2,"column":53},"end":{"line":19,"column":5}},"range":[86,600],"testsRan":["Array Group By grouping an empty array should return empty result","Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated","Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)","Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"    Array.prototype.groupBy = function (keySelector) {\r\n        var result = [];\r\n        var array = this;\r\n        this.forEach(function (item, index) {\r\n            var key = keySelector(item, index);\r\n            var keyItem = result.find(function (r) { return r.key === key; });\r\n            if (!keyItem) {\r\n                result.push({\r\n                    key: key,\r\n                    items: [item]\r\n                });\r\n            }\r\n            else {\r\n                keyItem.items.push(item);\r\n            }\r\n        });\r\n        return result;\r\n    };","mutatedLines":"    Array.prototype.groupBy = function (keySelector) {\n};"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"RemoveConditionals","status":2,"replacement":"true","location":{"start":{"line":1,"column":4},"end":{"line":1,"column":28}},"range":[4,28],"testsRan":["Array Group By grouping an empty array should return empty result","Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated","Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)","Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"if (!Array.prototype.groupBy) {","mutatedLines":"if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":1,"column":4},"end":{"line":1,"column":28}},"range":[4,28],"testsRan":["Array Group By grouping an empty array should return empty result","Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated","Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)","Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"if (!Array.prototype.groupBy) {","mutatedLines":"if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":7,"column":51},"end":{"line":7,"column":76}},"range":[289,314],"testsRan":["Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated"],"originalLines":"            var keyItem = result.find(function (r) { return r.key === key; });","mutatedLines":"            var keyItem = result.find(function (r) {\n});"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":8,"column":16},"end":{"line":8,"column":24}},"range":[334,342],"testsRan":["Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated"],"originalLines":"            if (!keyItem) {","mutatedLines":"            if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":8,"column":16},"end":{"line":8,"column":24}},"range":[334,342],"testsRan":["Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated"],"originalLines":"            if (!keyItem) {","mutatedLines":"            if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"RemoveConditionals","status":4,"replacement":"false","location":{"start":{"line":21,"column":4},"end":{"line":21,"column":32}},"range":[610,638],"testsRan":[],"originalLines":"if (!Array.prototype.groupReduce) {","mutatedLines":"if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"RemoveConditionals","status":4,"replacement":"true","location":{"start":{"line":21,"column":4},"end":{"line":21,"column":32}},"range":[610,638],"testsRan":[],"originalLines":"if (!Array.prototype.groupReduce) {","mutatedLines":"if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":8,"column":26},"end":{"line":13,"column":13}},"range":[344,478],"testsRan":["Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated"],"originalLines":"            if (!keyItem) {\r\n                result.push({\r\n                    key: key,\r\n                    items: [item]\r\n                });\r\n            }","mutatedLines":"            if (!keyItem) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BinaryOperator","status":1,"replacement":"r.key !== key","location":{"start":{"line":7,"column":60},"end":{"line":7,"column":73}},"range":[298,311],"testsRan":["Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated"],"originalLines":"            var keyItem = result.find(function (r) { return r.key === key; });","mutatedLines":"            var keyItem = result.find(function (r) { return r.key !== key; });"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":14,"column":17},"end":{"line":16,"column":13}},"range":[497,556],"testsRan":["Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated"],"originalLines":"            else {\r\n                keyItem.items.push(item);\r\n            }","mutatedLines":"            else {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":21,"column":34},"end":{"line":50,"column":1}},"range":[640,1651],"testsRan":["Array Group By grouping an empty array should return empty result","Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated","Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)","Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"if (!Array.prototype.groupReduce) {\r\n    Array.prototype.groupReduce = function (keySelector, reducer, initial) {\r\n        var result = [];\r\n        var array = this;\r\n        var initFunc;\r\n        if (Array.isArray(initial)) {\r\n            initFunc = function () { return initial.slice(); };\r\n        }\r\n        else if (typeof (initial) === \"object\" && initial != null) {\r\n            initFunc = function () { return Object.assign({}, initial); };\r\n        }\r\n        else {\r\n            initFunc = function () { return initial; };\r\n        }\r\n        this.forEach(function (item, index) {\r\n            var key = keySelector(item, index);\r\n            var keyItem = result.find(function (r) { return r.key === key; });\r\n            if (!keyItem) {\r\n                keyItem = {\r\n                    key: key,\r\n                    value: initFunc()\r\n                };\r\n                result.push(keyItem);\r\n            }\r\n            keyItem.value = reducer(keyItem.value, item);\r\n            ;\r\n        });\r\n        return result;\r\n    };\r\n}","mutatedLines":"if (!Array.prototype.groupReduce) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"ArrayDeclarator","status":1,"replacement":"[]","location":{"start":{"line":11,"column":27},"end":{"line":11,"column":33}},"range":[436,442],"testsRan":["Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated"],"originalLines":"                    items: [item]","mutatedLines":"                    items: []"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"RemoveConditionals","status":2,"replacement":"false","location":{"start":{"line":26,"column":12},"end":{"line":26,"column":34}},"range":[809,831],"testsRan":["Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)"],"originalLines":"        if (Array.isArray(initial)) {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":26,"column":36},"end":{"line":28,"column":9}},"range":[833,910],"testsRan":["Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)"],"originalLines":"        if (Array.isArray(initial)) {\r\n            initFunc = function () { return initial.slice(); };\r\n        }","mutatedLines":"        if (Array.isArray(initial)) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":26,"column":12},"end":{"line":26,"column":34}},"range":[809,831],"testsRan":["Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)"],"originalLines":"        if (Array.isArray(initial)) {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":22,"column":75},"end":{"line":49,"column":5}},"range":[718,1647],"testsRan":["Array Group By grouping an empty array should return empty result","Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated","Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)","Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"    Array.prototype.groupReduce = function (keySelector, reducer, initial) {\r\n        var result = [];\r\n        var array = this;\r\n        var initFunc;\r\n        if (Array.isArray(initial)) {\r\n            initFunc = function () { return initial.slice(); };\r\n        }\r\n        else if (typeof (initial) === \"object\" && initial != null) {\r\n            initFunc = function () { return Object.assign({}, initial); };\r\n        }\r\n        else {\r\n            initFunc = function () { return initial; };\r\n        }\r\n        this.forEach(function (item, index) {\r\n            var key = keySelector(item, index);\r\n            var keyItem = result.find(function (r) { return r.key === key; });\r\n            if (!keyItem) {\r\n                keyItem = {\r\n                    key: key,\r\n                    value: initFunc()\r\n                };\r\n                result.push(keyItem);\r\n            }\r\n            keyItem.value = reducer(keyItem.value, item);\r\n            ;\r\n        });\r\n        return result;\r\n    };","mutatedLines":"    Array.prototype.groupReduce = function (keySelector, reducer, initial) {\n};"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"RemoveConditionals","status":2,"replacement":"false","location":{"start":{"line":29,"column":17},"end":{"line":29,"column":65}},"range":[929,977],"testsRan":["Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)"],"originalLines":"        else if (typeof (initial) === \"object\" && initial != null) {","mutatedLines":"        else if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":29,"column":17},"end":{"line":29,"column":65}},"range":[929,977],"testsRan":["Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)"],"originalLines":"        else if (typeof (initial) === \"object\" && initial != null) {","mutatedLines":"        else if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":27,"column":35},"end":{"line":27,"column":62}},"range":[871,898],"testsRan":["Array Group By even and odd numbers should be properly separated and reduced (array reducer)"],"originalLines":"            initFunc = function () { return initial.slice(); };","mutatedLines":"            initFunc = function () {\n};"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BinaryOperator","status":1,"replacement":"typeof initial !== 'object'","location":{"start":{"line":29,"column":17},"end":{"line":29,"column":46}},"range":[929,958],"testsRan":["Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)"],"originalLines":"        else if (typeof (initial) === \"object\" && initial != null) {","mutatedLines":"        else if (typeof initial !== 'object' && initial != null) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"LogicalOperator","status":1,"replacement":"typeof initial === 'object' || initial != null","location":{"start":{"line":29,"column":17},"end":{"line":29,"column":65}},"range":[929,977],"testsRan":["Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)"],"originalLines":"        else if (typeof (initial) === \"object\" && initial != null) {","mutatedLines":"        else if (typeof initial === 'object' || initial != null) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":29,"column":67},"end":{"line":31,"column":9}},"range":[979,1067],"testsRan":["Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)"],"originalLines":"        else if (typeof (initial) === \"object\" && initial != null) {\r\n            initFunc = function () { return Object.assign({}, initial); };\r\n        }","mutatedLines":"        else if (typeof (initial) === \"object\" && initial != null) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BinaryOperator","status":2,"replacement":"initial == null","location":{"start":{"line":29,"column":50},"end":{"line":29,"column":65}},"range":[962,977],"testsRan":["Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)"],"originalLines":"        else if (typeof (initial) === \"object\" && initial != null) {","mutatedLines":"        else if (typeof (initial) === \"object\" && initial == null) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":30,"column":35},"end":{"line":30,"column":73}},"range":[1017,1055],"testsRan":["Array Group By even and odd numbers should be properly separated and reduced (object reducer)"],"originalLines":"            initFunc = function () { return Object.assign({}, initial); };","mutatedLines":"            initFunc = function () {\n};"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":32,"column":13},"end":{"line":34,"column":9}},"range":[1082,1151],"testsRan":["Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)"],"originalLines":"        else {\r\n            initFunc = function () { return initial; };\r\n        }","mutatedLines":"        else {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":35,"column":44},"end":{"line":47,"column":9}},"range":[1197,1614],"testsRan":["Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)"],"originalLines":"        this.forEach(function (item, index) {\r\n            var key = keySelector(item, index);\r\n            var keyItem = result.find(function (r) { return r.key === key; });\r\n            if (!keyItem) {\r\n                keyItem = {\r\n                    key: key,\r\n                    value: initFunc()\r\n                };\r\n                result.push(keyItem);\r\n            }\r\n            keyItem.value = reducer(keyItem.value, item);\r\n            ;\r\n        });","mutatedLines":"        this.forEach(function (item, index) {\n});"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":33,"column":35},"end":{"line":33,"column":54}},"range":[1120,1139],"testsRan":["Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)"],"originalLines":"            initFunc = function () { return initial; };","mutatedLines":"            initFunc = function () {\n};"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":38,"column":16},"end":{"line":38,"column":24}},"range":[1345,1353],"testsRan":["Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)"],"originalLines":"            if (!keyItem) {","mutatedLines":"            if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":37,"column":51},"end":{"line":37,"column":76}},"range":[1300,1325],"testsRan":["Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)"],"originalLines":"            var keyItem = result.find(function (r) { return r.key === key; });","mutatedLines":"            var keyItem = result.find(function (r) {\n});"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"LogicalOperator","status":4,"replacement":"exports.DiffType && (exports.DiffType = {})","location":{"start":{"line":10,"column":14},"end":{"line":10,"column":57}},"range":[410,453],"testsRan":[],"originalLines":"})(DiffType = exports.DiffType || (exports.DiffType = {}));","mutatedLines":"})(DiffType = exports.DiffType && (exports.DiffType = {}));"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BinaryOperator","status":1,"replacement":"r.key !== key","location":{"start":{"line":37,"column":60},"end":{"line":37,"column":73}},"range":[1309,1322],"testsRan":["Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)"],"originalLines":"            var keyItem = result.find(function (r) { return r.key === key; });","mutatedLines":"            var keyItem = result.find(function (r) { return r.key !== key; });"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":38,"column":16},"end":{"line":38,"column":24}},"range":[1345,1353],"testsRan":["Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)"],"originalLines":"            if (!keyItem) {","mutatedLines":"            if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":38,"column":26},"end":{"line":44,"column":13}},"range":[1355,1529],"testsRan":["Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)"],"originalLines":"            if (!keyItem) {\r\n                keyItem = {\r\n                    key: key,\r\n                    value: initFunc()\r\n                };\r\n                result.push(keyItem);\r\n            }","mutatedLines":"            if (!keyItem) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":12,"column":31},"end":{"line":209,"column":1}},"range":[490,7620],"testsRan":["Array Group By grouping an empty array should return empty result","Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated","Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)","Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"var GenericDiff = (function () {\r\n    function GenericDiff() {\r\n    }\r\n    GenericDiff.getDifference = function (oldValue, newValue, name, keyExtractors) {\r\n        var left = oldValue;\r\n        var right = newValue;\r\n        // handle undefined values\r\n        if (left === undefined) {\r\n            if (right === undefined) {\r\n                return {\r\n                    oldValue: undefined,\r\n                    newValue: undefined,\r\n                    changeType: DiffType.Unchanged\r\n                };\r\n            }\r\n            return {\r\n                oldValue: undefined,\r\n                newValue: right,\r\n                changeType: right === null ? DiffType.Modified : DiffType.Added\r\n            };\r\n        }\r\n        if (right === undefined) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: undefined,\r\n                changeType: left === null ? DiffType.Modified : DiffType.Removed\r\n            };\r\n        }\r\n        // handle null values\r\n        if (left === null) {\r\n            if (right === null) {\r\n                return {\r\n                    oldValue: null,\r\n                    newValue: null,\r\n                    changeType: DiffType.Unchanged\r\n                };\r\n            }\r\n            return {\r\n                oldValue: null,\r\n                newValue: right,\r\n                changeType: DiffType.Added\r\n            };\r\n        }\r\n        if (right === null) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: null,\r\n                changeType: DiffType.Removed\r\n            };\r\n        }\r\n        // handle base types\r\n        var leftType = typeof left;\r\n        var rightType = typeof right;\r\n        if (leftType !== rightType) {\r\n            return {\r\n                oldValue: oldValue,\r\n                newValue: newValue,\r\n                changeType: DiffType.TypeChanged\r\n            };\r\n        }\r\n        // are they primitives?\r\n        if (leftType !== \"object\") {\r\n            return {\r\n                oldValue: left,\r\n                newValue: right,\r\n                changeType: (left === right) ? DiffType.Unchanged : DiffType.Modified\r\n            };\r\n        }\r\n        // base case - are their serializations equal\r\n        var leftJson = JSON.stringify(left);\r\n        var rightJson = JSON.stringify(right);\r\n        if (leftJson === rightJson) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: right,\r\n                changeType: DiffType.Unchanged\r\n            };\r\n        }\r\n        // the values are objects, and they have different serializations\r\n        // are they arrays?\r\n        if (Array.isArray(left)) {\r\n            if (Array.isArray(right)) {\r\n                return (this.getArrayDifference(left, right, name, keyExtractors));\r\n            }\r\n            else {\r\n                return {\r\n                    oldValue: left,\r\n                    newValue: right,\r\n                    changeType: DiffType.TypeChanged\r\n                };\r\n            }\r\n        }\r\n        if (Array.isArray(right)) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: right,\r\n                changeType: DiffType.TypeChanged\r\n            };\r\n        }\r\n        // compare object properties by name\r\n        var allKeyNames = Object.keys(left).concat(Object.keys(right));\r\n        var result = {\r\n            oldValue: left,\r\n            newValue: right,\r\n            changeType: DiffType.Uncomparable\r\n        };\r\n        for (var index = 0; index < allKeyNames.length; index += 1) {\r\n            var propName = allKeyNames[index];\r\n            var diff = this.getDifference(left[propName], right[propName], propName, keyExtractors);\r\n            if (diff.changeType !== DiffType.Unchanged) {\r\n                result[propName] = diff;\r\n            }\r\n        }\r\n        // are there any changes\r\n        if (allKeyNames.some(function (key) { return result[key] && result[key].changeType !== DiffType.Unchanged; })) {\r\n            result.changeType = DiffType.Modified;\r\n            return result;\r\n        }\r\n        return {\r\n            oldValue: left,\r\n            newValue: right,\r\n            changeType: DiffType.Unchanged\r\n        };\r\n    };\r\n    GenericDiff.getArrayDifference = function (leftArray, rightArray, name, keyExtractors) {\r\n        var addedItems = rightArray.slice();\r\n        var unchangedItems = [];\r\n        var removedItems = [];\r\n        var changedItems = [];\r\n        if (keyExtractors && keyExtractors[name]) {\r\n            // we're using key matching\r\n            var keyGetter_1 = keyExtractors[name];\r\n            var _loop_1 = function (lindex) {\r\n                var litem = leftArray[lindex];\r\n                var lkey = keyGetter_1(litem);\r\n                var rindex = addedItems.findIndex(function (r) { return keyGetter_1(r) === lkey; });\r\n                var ritem = addedItems[rindex];\r\n                if (!ritem) {\r\n                    removedItems.push(litem);\r\n                }\r\n                else {\r\n                    addedItems.splice(rindex, 1);\r\n                    var diff = this_1.getDifference(litem, ritem, name, keyExtractors);\r\n                    if (diff.changeType === DiffType.Unchanged) {\r\n                        unchangedItems.push(ritem);\r\n                    }\r\n                    else {\r\n                        changedItems.push(diff);\r\n                    }\r\n                }\r\n            };\r\n            var this_1 = this;\r\n            for (var lindex = 0; lindex < leftArray.length; lindex++) {\r\n                _loop_1(lindex);\r\n            }\r\n            ;\r\n        }\r\n        else {\r\n            // we're using full object matching\r\n            for (var lindex = 0; lindex < leftArray.length; lindex++) {\r\n                var left = leftArray[lindex];\r\n                var found = false;\r\n                for (var rindex = 0; rindex < addedItems.length; rindex++) {\r\n                    var right = addedItems[rindex];\r\n                    if (this.getDifference(left, right, name, keyExtractors).changeType === DiffType.Unchanged) {\r\n                        unchangedItems.push(right);\r\n                        addedItems.splice(rindex, 1);\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    removedItems.push(left);\r\n                }\r\n            }\r\n        }\r\n        var changeType = DiffType.Unchanged;\r\n        if (addedItems.length !== 0) {\r\n            changeType = changeType | DiffType.Added;\r\n        }\r\n        if (removedItems.length !== 0) {\r\n            changeType = changeType | DiffType.Removed;\r\n        }\r\n        if (changedItems.length !== 0) {\r\n            changeType = changeType | DiffType.Modified;\r\n        }\r\n        return {\r\n            oldValue: leftArray,\r\n            newValue: rightArray,\r\n            addedItems: addedItems,\r\n            removedItems: removedItems,\r\n            unchangedItems: unchangedItems,\r\n            changedItems: changedItems,\r\n            changeType: changeType\r\n        };\r\n    };\r\n    return GenericDiff;\r\n}());","mutatedLines":"var GenericDiff = (function () {\n}());"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":19,"column":12},"end":{"line":19,"column":30}},"range":[725,743],"testsRan":["Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (left === undefined) {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":3,"column":21},"end":{"line":10,"column":1}},"range":[55,397],"testsRan":["Array Group By grouping an empty array should return empty result","Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated","Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)","Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"(function (DiffType) {\r\n    DiffType[DiffType[\"Unchanged\"] = 0] = \"Unchanged\";\r\n    DiffType[DiffType[\"Added\"] = 1] = \"Added\";\r\n    DiffType[DiffType[\"Removed\"] = 2] = \"Removed\";\r\n    DiffType[DiffType[\"Modified\"] = 4] = \"Modified\";\r\n    DiffType[DiffType[\"TypeChanged\"] = 8] = \"TypeChanged\";\r\n    DiffType[DiffType[\"Uncomparable\"] = 1048576] = \"Uncomparable\";\r\n})(DiffType = exports.DiffType || (exports.DiffType = {}));","mutatedLines":"(function (DiffType) {\n})(DiffType = exports.DiffType || (exports.DiffType = {}));"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":15,"column":83},"end":{"line":135,"column":5}},"range":[613,4703],"testsRan":["Array Group By grouping an empty array should return empty result","Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated","Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)","Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"    GenericDiff.getDifference = function (oldValue, newValue, name, keyExtractors) {\r\n        var left = oldValue;\r\n        var right = newValue;\r\n        // handle undefined values\r\n        if (left === undefined) {\r\n            if (right === undefined) {\r\n                return {\r\n                    oldValue: undefined,\r\n                    newValue: undefined,\r\n                    changeType: DiffType.Unchanged\r\n                };\r\n            }\r\n            return {\r\n                oldValue: undefined,\r\n                newValue: right,\r\n                changeType: right === null ? DiffType.Modified : DiffType.Added\r\n            };\r\n        }\r\n        if (right === undefined) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: undefined,\r\n                changeType: left === null ? DiffType.Modified : DiffType.Removed\r\n            };\r\n        }\r\n        // handle null values\r\n        if (left === null) {\r\n            if (right === null) {\r\n                return {\r\n                    oldValue: null,\r\n                    newValue: null,\r\n                    changeType: DiffType.Unchanged\r\n                };\r\n            }\r\n            return {\r\n                oldValue: null,\r\n                newValue: right,\r\n                changeType: DiffType.Added\r\n            };\r\n        }\r\n        if (right === null) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: null,\r\n                changeType: DiffType.Removed\r\n            };\r\n        }\r\n        // handle base types\r\n        var leftType = typeof left;\r\n        var rightType = typeof right;\r\n        if (leftType !== rightType) {\r\n            return {\r\n                oldValue: oldValue,\r\n                newValue: newValue,\r\n                changeType: DiffType.TypeChanged\r\n            };\r\n        }\r\n        // are they primitives?\r\n        if (leftType !== \"object\") {\r\n            return {\r\n                oldValue: left,\r\n                newValue: right,\r\n                changeType: (left === right) ? DiffType.Unchanged : DiffType.Modified\r\n            };\r\n        }\r\n        // base case - are their serializations equal\r\n        var leftJson = JSON.stringify(left);\r\n        var rightJson = JSON.stringify(right);\r\n        if (leftJson === rightJson) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: right,\r\n                changeType: DiffType.Unchanged\r\n            };\r\n        }\r\n        // the values are objects, and they have different serializations\r\n        // are they arrays?\r\n        if (Array.isArray(left)) {\r\n            if (Array.isArray(right)) {\r\n                return (this.getArrayDifference(left, right, name, keyExtractors));\r\n            }\r\n            else {\r\n                return {\r\n                    oldValue: left,\r\n                    newValue: right,\r\n                    changeType: DiffType.TypeChanged\r\n                };\r\n            }\r\n        }\r\n        if (Array.isArray(right)) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: right,\r\n                changeType: DiffType.TypeChanged\r\n            };\r\n        }\r\n        // compare object properties by name\r\n        var allKeyNames = Object.keys(left).concat(Object.keys(right));\r\n        var result = {\r\n            oldValue: left,\r\n            newValue: right,\r\n            changeType: DiffType.Uncomparable\r\n        };\r\n        for (var index = 0; index < allKeyNames.length; index += 1) {\r\n            var propName = allKeyNames[index];\r\n            var diff = this.getDifference(left[propName], right[propName], propName, keyExtractors);\r\n            if (diff.changeType !== DiffType.Unchanged) {\r\n                result[propName] = diff;\r\n            }\r\n        }\r\n        // are there any changes\r\n        if (allKeyNames.some(function (key) { return result[key] && result[key].changeType !== DiffType.Unchanged; })) {\r\n            result.changeType = DiffType.Modified;\r\n            return result;\r\n        }\r\n        return {\r\n            oldValue: left,\r\n            newValue: right,\r\n            changeType: DiffType.Unchanged\r\n        };\r\n    };","mutatedLines":"    GenericDiff.getDifference = function (oldValue, newValue, name, keyExtractors) {\n};"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"left !== undefined","location":{"start":{"line":19,"column":12},"end":{"line":19,"column":30}},"range":[725,743],"testsRan":["Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (left === undefined) {","mutatedLines":"        if (left !== undefined) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":20,"column":16},"end":{"line":20,"column":35}},"range":[764,783],"testsRan":["Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that two objects with different properties result in an Modified result"],"originalLines":"            if (right === undefined) {","mutatedLines":"            if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":19,"column":12},"end":{"line":19,"column":30}},"range":[725,743],"testsRan":["Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (left === undefined) {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":20,"column":37},"end":{"line":26,"column":13}},"range":[785,983],"testsRan":["Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that two objects with different properties result in an Modified result"],"originalLines":"            if (right === undefined) {\r\n                return {\r\n                    oldValue: undefined,\r\n                    newValue: undefined,\r\n                    changeType: DiffType.Unchanged\r\n                };\r\n            }","mutatedLines":"            if (right === undefined) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"right !== undefined","location":{"start":{"line":20,"column":16},"end":{"line":20,"column":35}},"range":[764,783],"testsRan":["Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that two objects with different properties result in an Modified result"],"originalLines":"            if (right === undefined) {","mutatedLines":"            if (right !== undefined) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":19,"column":32},"end":{"line":32,"column":9}},"range":[745,1185],"testsRan":["Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (left === undefined) {\r\n            if (right === undefined) {\r\n                return {\r\n                    oldValue: undefined,\r\n                    newValue: undefined,\r\n                    changeType: DiffType.Unchanged\r\n                };\r\n            }\r\n            return {\r\n                oldValue: undefined,\r\n                newValue: right,\r\n                changeType: right === null ? DiffType.Modified : DiffType.Added\r\n            };\r\n        }","mutatedLines":"        if (left === undefined) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":30,"column":28},"end":{"line":30,"column":42}},"range":[1107,1121],"testsRan":["Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that two objects with different properties result in an Modified result"],"originalLines":"                changeType: right === null ? DiffType.Modified : DiffType.Added","mutatedLines":"                changeType: false ? DiffType.Modified : DiffType.Added"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":20,"column":16},"end":{"line":20,"column":35}},"range":[764,783],"testsRan":["Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that two objects with different properties result in an Modified result"],"originalLines":"            if (right === undefined) {","mutatedLines":"            if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"right !== null","location":{"start":{"line":30,"column":28},"end":{"line":30,"column":42}},"range":[1107,1121],"testsRan":["Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that two objects with different properties result in an Modified result"],"originalLines":"                changeType: right === null ? DiffType.Modified : DiffType.Added","mutatedLines":"                changeType: right !== null ? DiffType.Modified : DiffType.Added"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":30,"column":28},"end":{"line":30,"column":42}},"range":[1107,1121],"testsRan":["Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that two objects with different properties result in an Modified result"],"originalLines":"                changeType: right === null ? DiffType.Modified : DiffType.Added","mutatedLines":"                changeType: true ? DiffType.Modified : DiffType.Added"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":33,"column":12},"end":{"line":33,"column":31}},"range":[1199,1218],"testsRan":["Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (right === undefined) {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":33,"column":12},"end":{"line":33,"column":31}},"range":[1199,1218],"testsRan":["Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (right === undefined) {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":37,"column":28},"end":{"line":37,"column":41}},"range":[1344,1357],"testsRan":["Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that two objects with different properties result in an Modified result"],"originalLines":"                changeType: left === null ? DiffType.Modified : DiffType.Removed","mutatedLines":"                changeType: true ? DiffType.Modified : DiffType.Removed"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":37,"column":28},"end":{"line":37,"column":41}},"range":[1344,1357],"testsRan":["Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that two objects with different properties result in an Modified result"],"originalLines":"                changeType: left === null ? DiffType.Modified : DiffType.Removed","mutatedLines":"                changeType: false ? DiffType.Modified : DiffType.Removed"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":33,"column":33},"end":{"line":39,"column":9}},"range":[1220,1423],"testsRan":["Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (right === undefined) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: undefined,\r\n                changeType: left === null ? DiffType.Modified : DiffType.Removed\r\n            };\r\n        }","mutatedLines":"        if (right === undefined) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"right !== undefined","location":{"start":{"line":33,"column":12},"end":{"line":33,"column":31}},"range":[1199,1218],"testsRan":["Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (right === undefined) {","mutatedLines":"        if (right !== undefined) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":41,"column":12},"end":{"line":41,"column":25}},"range":[1468,1481],"testsRan":["Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (left === null) {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"left !== null","location":{"start":{"line":37,"column":28},"end":{"line":37,"column":41}},"range":[1344,1357],"testsRan":["Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that two objects with different properties result in an Modified result"],"originalLines":"                changeType: left === null ? DiffType.Modified : DiffType.Removed","mutatedLines":"                changeType: left !== null ? DiffType.Modified : DiffType.Removed"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":42,"column":16},"end":{"line":42,"column":30}},"range":[1502,1516],"testsRan":["Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added"],"originalLines":"            if (right === null) {","mutatedLines":"            if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":42,"column":16},"end":{"line":42,"column":30}},"range":[1502,1516],"testsRan":["Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added"],"originalLines":"            if (right === null) {","mutatedLines":"            if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":41,"column":12},"end":{"line":41,"column":25}},"range":[1468,1481],"testsRan":["Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (left === null) {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"left !== null","location":{"start":{"line":41,"column":12},"end":{"line":41,"column":25}},"range":[1468,1481],"testsRan":["Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (left === null) {","mutatedLines":"        if (left !== null) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":42,"column":32},"end":{"line":48,"column":13}},"range":[1518,1706],"testsRan":["Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added"],"originalLines":"            if (right === null) {\r\n                return {\r\n                    oldValue: null,\r\n                    newValue: null,\r\n                    changeType: DiffType.Unchanged\r\n                };\r\n            }","mutatedLines":"            if (right === null) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":41,"column":27},"end":{"line":54,"column":9}},"range":[1483,1866],"testsRan":["Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (left === null) {\r\n            if (right === null) {\r\n                return {\r\n                    oldValue: null,\r\n                    newValue: null,\r\n                    changeType: DiffType.Unchanged\r\n                };\r\n            }\r\n            return {\r\n                oldValue: null,\r\n                newValue: right,\r\n                changeType: DiffType.Added\r\n            };\r\n        }","mutatedLines":"        if (left === null) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"right !== null","location":{"start":{"line":42,"column":16},"end":{"line":42,"column":30}},"range":[1502,1516],"testsRan":["Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added"],"originalLines":"            if (right === null) {","mutatedLines":"            if (right !== null) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":55,"column":12},"end":{"line":55,"column":26}},"range":[1880,1894],"testsRan":["Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (right === null) {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":55,"column":12},"end":{"line":55,"column":26}},"range":[1880,1894],"testsRan":["Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (right === null) {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":65,"column":12},"end":{"line":65,"column":34}},"range":[2178,2200],"testsRan":["Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (leftType !== rightType) {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":55,"column":28},"end":{"line":61,"column":9}},"range":[1896,2058],"testsRan":["Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (right === null) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: null,\r\n                changeType: DiffType.Removed\r\n            };\r\n        }","mutatedLines":"        if (right === null) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"right !== null","location":{"start":{"line":55,"column":12},"end":{"line":55,"column":26}},"range":[1880,1894],"testsRan":["Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (right === null) {","mutatedLines":"        if (right !== null) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":65,"column":36},"end":{"line":71,"column":9}},"range":[2202,2376],"testsRan":["Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (leftType !== rightType) {\r\n            return {\r\n                oldValue: oldValue,\r\n                newValue: newValue,\r\n                changeType: DiffType.TypeChanged\r\n            };\r\n        }","mutatedLines":"        if (leftType !== rightType) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"leftType === rightType","location":{"start":{"line":65,"column":12},"end":{"line":65,"column":34}},"range":[2178,2200],"testsRan":["Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (leftType !== rightType) {","mutatedLines":"        if (leftType === rightType) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":65,"column":12},"end":{"line":65,"column":34}},"range":[2178,2200],"testsRan":["Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (leftType !== rightType) {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":73,"column":12},"end":{"line":73,"column":33}},"range":[2423,2444],"testsRan":["Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (leftType !== \"object\") {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"leftType === 'object'","location":{"start":{"line":73,"column":12},"end":{"line":73,"column":33}},"range":[2423,2444],"testsRan":["Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (leftType !== \"object\") {","mutatedLines":"        if (leftType === 'object') {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":77,"column":29},"end":{"line":77,"column":43}},"range":[2567,2581],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"                changeType: (left === right) ? DiffType.Unchanged : DiffType.Modified","mutatedLines":"                changeType: (true) ? DiffType.Unchanged : DiffType.Modified"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":77,"column":29},"end":{"line":77,"column":43}},"range":[2567,2581],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"                changeType: (left === right) ? DiffType.Unchanged : DiffType.Modified","mutatedLines":"                changeType: (false) ? DiffType.Unchanged : DiffType.Modified"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"left !== right","location":{"start":{"line":77,"column":29},"end":{"line":77,"column":43}},"range":[2567,2581],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"                changeType: (left === right) ? DiffType.Unchanged : DiffType.Modified","mutatedLines":"                changeType: (left !== right) ? DiffType.Unchanged : DiffType.Modified"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":83,"column":12},"end":{"line":83,"column":34}},"range":[2813,2835],"testsRan":["Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (leftJson === rightJson) {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":83,"column":12},"end":{"line":83,"column":34}},"range":[2813,2835],"testsRan":["Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (leftJson === rightJson) {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"leftJson !== rightJson","location":{"start":{"line":83,"column":12},"end":{"line":83,"column":34}},"range":[2813,2835],"testsRan":["Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (leftJson === rightJson) {","mutatedLines":"        if (leftJson !== rightJson) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":83,"column":36},"end":{"line":89,"column":9}},"range":[2837,3002],"testsRan":["Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (leftJson === rightJson) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: right,\r\n                changeType: DiffType.Unchanged\r\n            };\r\n        }","mutatedLines":"        if (leftJson === rightJson) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":92,"column":12},"end":{"line":92,"column":31}},"range":[3120,3139],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (Array.isArray(left)) {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":92,"column":33},"end":{"line":103,"column":9}},"range":[3141,3504],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (Array.isArray(left)) {\r\n            if (Array.isArray(right)) {\r\n                return (this.getArrayDifference(left, right, name, keyExtractors));\r\n            }\r\n            else {\r\n                return {\r\n                    oldValue: left,\r\n                    newValue: right,\r\n                    changeType: DiffType.TypeChanged\r\n                };\r\n            }\r\n        }","mutatedLines":"        if (Array.isArray(left)) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":93,"column":16},"end":{"line":93,"column":36}},"range":[3160,3180],"testsRan":["Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"            if (Array.isArray(right)) {","mutatedLines":"            if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":93,"column":16},"end":{"line":93,"column":36}},"range":[3160,3180],"testsRan":["Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"            if (Array.isArray(right)) {","mutatedLines":"            if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":92,"column":12},"end":{"line":92,"column":31}},"range":[3120,3139],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (Array.isArray(left)) {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":93,"column":38},"end":{"line":95,"column":13}},"range":[3182,3283],"testsRan":["Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"            if (Array.isArray(right)) {\r\n                return (this.getArrayDifference(left, right, name, keyExtractors));\r\n            }","mutatedLines":"            if (Array.isArray(right)) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":104,"column":12},"end":{"line":104,"column":32}},"range":[3518,3538],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (Array.isArray(right)) {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":96,"column":17},"end":{"line":102,"column":13}},"range":[3302,3493],"testsRan":["Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"            else {\r\n                return {\r\n                    oldValue: left,\r\n                    newValue: right,\r\n                    changeType: DiffType.TypeChanged\r\n                };\r\n            }","mutatedLines":"            else {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":104,"column":34},"end":{"line":110,"column":9}},"range":[3540,3707],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (Array.isArray(right)) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: right,\r\n                changeType: DiffType.TypeChanged\r\n            };\r\n        }","mutatedLines":"        if (Array.isArray(right)) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":104,"column":12},"end":{"line":104,"column":32}},"range":[3518,3538],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (Array.isArray(right)) {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":118,"column":28},"end":{"line":118,"column":54}},"range":[3998,4024],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        for (var index = 0; index < allKeyNames.length; index += 1) {","mutatedLines":"        for (var index = 0; false; index += 1) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":2,"replacement":"index <= allKeyNames.length","location":{"start":{"line":118,"column":28},"end":{"line":118,"column":54}},"range":[3998,4024],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        for (var index = 0; index < allKeyNames.length; index += 1) {","mutatedLines":"        for (var index = 0; index <= allKeyNames.length; index += 1) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"index >= allKeyNames.length","location":{"start":{"line":118,"column":28},"end":{"line":118,"column":54}},"range":[3998,4024],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        for (var index = 0; index < allKeyNames.length; index += 1) {","mutatedLines":"        for (var index = 0; index >= allKeyNames.length; index += 1) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":121,"column":16},"end":{"line":121,"column":54}},"range":[4207,4245],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"            if (diff.changeType !== DiffType.Unchanged) {","mutatedLines":"            if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":118,"column":68},"end":{"line":124,"column":9}},"range":[4038,4316],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        for (var index = 0; index < allKeyNames.length; index += 1) {\r\n            var propName = allKeyNames[index];\r\n            var diff = this.getDifference(left[propName], right[propName], propName, keyExtractors);\r\n            if (diff.changeType !== DiffType.Unchanged) {\r\n                result[propName] = diff;\r\n            }\r\n        }","mutatedLines":"        for (var index = 0; index < allKeyNames.length; index += 1) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":121,"column":56},"end":{"line":123,"column":13}},"range":[4247,4305],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"            if (diff.changeType !== DiffType.Unchanged) {\r\n                result[propName] = diff;\r\n            }","mutatedLines":"            if (diff.changeType !== DiffType.Unchanged) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":121,"column":16},"end":{"line":121,"column":54}},"range":[4207,4245],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"            if (diff.changeType !== DiffType.Unchanged) {","mutatedLines":"            if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":126,"column":12},"end":{"line":126,"column":117}},"range":[4364,4469],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (allKeyNames.some(function (key) { return result[key] && result[key].changeType !== DiffType.Unchanged; })) {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"diff.changeType === DiffType.Unchanged","location":{"start":{"line":121,"column":16},"end":{"line":121,"column":54}},"range":[4207,4245],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"            if (diff.changeType !== DiffType.Unchanged) {","mutatedLines":"            if (diff.changeType === DiffType.Unchanged) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"LogicalOperator","status":1,"replacement":"result[key] || result[key].changeType !== DiffType.Unchanged","location":{"start":{"line":126,"column":53},"end":{"line":126,"column":113}},"range":[4405,4465],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (allKeyNames.some(function (key) { return result[key] && result[key].changeType !== DiffType.Unchanged; })) {","mutatedLines":"        if (allKeyNames.some(function (key) { return result[key] || result[key].changeType !== DiffType.Unchanged; })) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":126,"column":12},"end":{"line":126,"column":117}},"range":[4364,4469],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (allKeyNames.some(function (key) { return result[key] && result[key].changeType !== DiffType.Unchanged; })) {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":126,"column":44},"end":{"line":126,"column":116}},"range":[4396,4468],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (allKeyNames.some(function (key) { return result[key] && result[key].changeType !== DiffType.Unchanged; })) {","mutatedLines":"        if (allKeyNames.some(function (key) {\n})) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":136,"column":91},"end":{"line":207,"column":5}},"range":[4797,7591],"testsRan":["Array Group By grouping an empty array should return empty result","Array Group By one item array should result in one group","Array Group By two items with different keys should result in two group","Array Group By two items with same keys should result in one group","Array Group By five items should properly be grouped in two groups","Array Group By even and odd numbers should be properly separated","Array Group By group-reducing an empty array should return empty result","Array Group By one item array should result in one group with ignoring reducer","Array Group By one item array should result in one group with summing reducer","Array Group By two items with different keys should result in two group with ignoring reducer","Array Group By two items with different keys should result in two group with summing reducer","Array Group By two items with same keys should result in one group with ignoring reducer","Array Group By two items with same keys should result in one group with summing reducer","Array Group By five items should properly be grouped in two groups with ignoring reducer","Array Group By five items should properly be grouped in two groups with summing reducer","Array Group By even and odd numbers should be properly separated and reduced (summing reducer)","Array Group By even and odd numbers should be properly separated and reduced (multiplying reducer)","Array Group By even and odd numbers should be properly separated and reduced (object reducer)","Array Group By even and odd numbers should be properly separated and reduced (array reducer)","Generic difference calculator verifies that generic diff of two undefineds returns that nothing is changed","Generic difference calculator verifies that generic diff of undefined and value returns that value is Added","Generic difference calculator verifies that generic diff of value and undefined returns that value is Removed","Generic difference calculator verifies that generic diff of two nulls returns that nothing is changed","Generic difference calculator verifies that generic diff of null and value returns that value is Added","Generic difference calculator verifies that generic diff of value and null returns that value is Removed","Generic difference calculator verifies that generic diff of undefined and null returns that value is Modified","Generic difference calculator verifies that generic diff of null and undefined returns that value is Modified","Generic difference calculator verifies that generic diff of string and number returns that value is TypeChanged","Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"    GenericDiff.getArrayDifference = function (leftArray, rightArray, name, keyExtractors) {\r\n        var addedItems = rightArray.slice();\r\n        var unchangedItems = [];\r\n        var removedItems = [];\r\n        var changedItems = [];\r\n        if (keyExtractors && keyExtractors[name]) {\r\n            // we're using key matching\r\n            var keyGetter_1 = keyExtractors[name];\r\n            var _loop_1 = function (lindex) {\r\n                var litem = leftArray[lindex];\r\n                var lkey = keyGetter_1(litem);\r\n                var rindex = addedItems.findIndex(function (r) { return keyGetter_1(r) === lkey; });\r\n                var ritem = addedItems[rindex];\r\n                if (!ritem) {\r\n                    removedItems.push(litem);\r\n                }\r\n                else {\r\n                    addedItems.splice(rindex, 1);\r\n                    var diff = this_1.getDifference(litem, ritem, name, keyExtractors);\r\n                    if (diff.changeType === DiffType.Unchanged) {\r\n                        unchangedItems.push(ritem);\r\n                    }\r\n                    else {\r\n                        changedItems.push(diff);\r\n                    }\r\n                }\r\n            };\r\n            var this_1 = this;\r\n            for (var lindex = 0; lindex < leftArray.length; lindex++) {\r\n                _loop_1(lindex);\r\n            }\r\n            ;\r\n        }\r\n        else {\r\n            // we're using full object matching\r\n            for (var lindex = 0; lindex < leftArray.length; lindex++) {\r\n                var left = leftArray[lindex];\r\n                var found = false;\r\n                for (var rindex = 0; rindex < addedItems.length; rindex++) {\r\n                    var right = addedItems[rindex];\r\n                    if (this.getDifference(left, right, name, keyExtractors).changeType === DiffType.Unchanged) {\r\n                        unchangedItems.push(right);\r\n                        addedItems.splice(rindex, 1);\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    removedItems.push(left);\r\n                }\r\n            }\r\n        }\r\n        var changeType = DiffType.Unchanged;\r\n        if (addedItems.length !== 0) {\r\n            changeType = changeType | DiffType.Added;\r\n        }\r\n        if (removedItems.length !== 0) {\r\n            changeType = changeType | DiffType.Removed;\r\n        }\r\n        if (changedItems.length !== 0) {\r\n            changeType = changeType | DiffType.Modified;\r\n        }\r\n        return {\r\n            oldValue: leftArray,\r\n            newValue: rightArray,\r\n            addedItems: addedItems,\r\n            removedItems: removedItems,\r\n            unchangedItems: unchangedItems,\r\n            changedItems: changedItems,\r\n            changeType: changeType\r\n        };\r\n    };","mutatedLines":"    GenericDiff.getArrayDifference = function (leftArray, rightArray, name, keyExtractors) {\n};"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":126,"column":119},"end":{"line":129,"column":9}},"range":[4471,4563],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (allKeyNames.some(function (key) { return result[key] && result[key].changeType !== DiffType.Unchanged; })) {\r\n            result.changeType = DiffType.Modified;\r\n            return result;\r\n        }","mutatedLines":"        if (allKeyNames.some(function (key) { return result[key] && result[key].changeType !== DiffType.Unchanged; })) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"result[key].changeType === DiffType.Unchanged","location":{"start":{"line":126,"column":68},"end":{"line":126,"column":113}},"range":[4420,4465],"testsRan":["Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (allKeyNames.some(function (key) { return result[key] && result[key].changeType !== DiffType.Unchanged; })) {","mutatedLines":"        if (allKeyNames.some(function (key) { return result[key] && result[key].changeType === DiffType.Unchanged; })) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":141,"column":12},"end":{"line":141,"column":48}},"range":[4956,4992],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (keyExtractors && keyExtractors[name]) {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"LogicalOperator","status":1,"replacement":"keyExtractors || keyExtractors[name]","location":{"start":{"line":141,"column":12},"end":{"line":141,"column":48}},"range":[4956,4992],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (keyExtractors && keyExtractors[name]) {","mutatedLines":"        if (keyExtractors || keyExtractors[name]) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":141,"column":12},"end":{"line":141,"column":48}},"range":[4956,4992],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (keyExtractors && keyExtractors[name]) {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":141,"column":50},"end":{"line":168,"column":9}},"range":[4994,6102],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (keyExtractors && keyExtractors[name]) {\r\n            // we're using key matching\r\n            var keyGetter_1 = keyExtractors[name];\r\n            var _loop_1 = function (lindex) {\r\n                var litem = leftArray[lindex];\r\n                var lkey = keyGetter_1(litem);\r\n                var rindex = addedItems.findIndex(function (r) { return keyGetter_1(r) === lkey; });\r\n                var ritem = addedItems[rindex];\r\n                if (!ritem) {\r\n                    removedItems.push(litem);\r\n                }\r\n                else {\r\n                    addedItems.splice(rindex, 1);\r\n                    var diff = this_1.getDifference(litem, ritem, name, keyExtractors);\r\n                    if (diff.changeType === DiffType.Unchanged) {\r\n                        unchangedItems.push(ritem);\r\n                    }\r\n                    else {\r\n                        changedItems.push(diff);\r\n                    }\r\n                }\r\n            };\r\n            var this_1 = this;\r\n            for (var lindex = 0; lindex < leftArray.length; lindex++) {\r\n                _loop_1(lindex);\r\n            }\r\n            ;\r\n        }","mutatedLines":"        if (keyExtractors && keyExtractors[name]) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":144,"column":44},"end":{"line":162,"column":13}},"range":[5134,5921],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"            var _loop_1 = function (lindex) {\r\n                var litem = leftArray[lindex];\r\n                var lkey = keyGetter_1(litem);\r\n                var rindex = addedItems.findIndex(function (r) { return keyGetter_1(r) === lkey; });\r\n                var ritem = addedItems[rindex];\r\n                if (!ritem) {\r\n                    removedItems.push(litem);\r\n                }\r\n                else {\r\n                    addedItems.splice(rindex, 1);\r\n                    var diff = this_1.getDifference(litem, ritem, name, keyExtractors);\r\n                    if (diff.changeType === DiffType.Unchanged) {\r\n                        unchangedItems.push(ritem);\r\n                    }\r\n                    else {\r\n                        changedItems.push(diff);\r\n                    }\r\n                }\r\n            };","mutatedLines":"            var _loop_1 = function (lindex) {\n};"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":147,"column":63},"end":{"line":147,"column":98}},"range":[5296,5331],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"                var rindex = addedItems.findIndex(function (r) { return keyGetter_1(r) === lkey; });","mutatedLines":"                var rindex = addedItems.findIndex(function (r) {\n});"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"keyGetter_1(r) !== lkey","location":{"start":{"line":147,"column":72},"end":{"line":147,"column":95}},"range":[5305,5328],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"                var rindex = addedItems.findIndex(function (r) { return keyGetter_1(r) === lkey; });","mutatedLines":"                var rindex = addedItems.findIndex(function (r) { return keyGetter_1(r) !== lkey; });"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":2,"replacement":"false","location":{"start":{"line":149,"column":20},"end":{"line":149,"column":26}},"range":[5404,5410],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"                if (!ritem) {","mutatedLines":"                if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":2,"replacement":"{\n}","location":{"start":{"line":149,"column":28},"end":{"line":151,"column":17}},"range":[5412,5479],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"                if (!ritem) {\r\n                    removedItems.push(litem);\r\n                }","mutatedLines":"                if (!ritem) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":149,"column":20},"end":{"line":149,"column":26}},"range":[5404,5410],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"                if (!ritem) {","mutatedLines":"                if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":152,"column":21},"end":{"line":161,"column":17}},"range":[5502,5906],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"                else {\r\n                    addedItems.splice(rindex, 1);\r\n                    var diff = this_1.getDifference(litem, ritem, name, keyExtractors);\r\n                    if (diff.changeType === DiffType.Unchanged) {\r\n                        unchangedItems.push(ritem);\r\n                    }\r\n                    else {\r\n                        changedItems.push(diff);\r\n                    }\r\n                }","mutatedLines":"                else {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":155,"column":24},"end":{"line":155,"column":62}},"range":[5669,5707],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"                    if (diff.changeType === DiffType.Unchanged) {","mutatedLines":"                    if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":155,"column":24},"end":{"line":155,"column":62}},"range":[5669,5707],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"                    if (diff.changeType === DiffType.Unchanged) {","mutatedLines":"                    if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":155,"column":64},"end":{"line":157,"column":21}},"range":[5709,5786],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"                    if (diff.changeType === DiffType.Unchanged) {\r\n                        unchangedItems.push(ritem);\r\n                    }","mutatedLines":"                    if (diff.changeType === DiffType.Unchanged) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"diff.changeType !== DiffType.Unchanged","location":{"start":{"line":155,"column":24},"end":{"line":155,"column":62}},"range":[5669,5707],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"                    if (diff.changeType === DiffType.Unchanged) {","mutatedLines":"                    if (diff.changeType !== DiffType.Unchanged) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":158,"column":25},"end":{"line":160,"column":21}},"range":[5813,5887],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"                    else {\r\n                        changedItems.push(diff);\r\n                    }","mutatedLines":"                    else {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":164,"column":33},"end":{"line":164,"column":58}},"range":[5989,6014],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"            for (var lindex = 0; lindex < leftArray.length; lindex++) {","mutatedLines":"            for (var lindex = 0; false; lindex++) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"lindex <= leftArray.length","location":{"start":{"line":164,"column":33},"end":{"line":164,"column":58}},"range":[5989,6014],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"            for (var lindex = 0; lindex < leftArray.length; lindex++) {","mutatedLines":"            for (var lindex = 0; lindex <= leftArray.length; lindex++) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":164,"column":70},"end":{"line":166,"column":13}},"range":[6026,6076],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"            for (var lindex = 0; lindex < leftArray.length; lindex++) {\r\n                _loop_1(lindex);\r\n            }","mutatedLines":"            for (var lindex = 0; lindex < leftArray.length; lindex++) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":169,"column":13},"end":{"line":187,"column":9}},"range":[6117,6912],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        else {\r\n            // we're using full object matching\r\n            for (var lindex = 0; lindex < leftArray.length; lindex++) {\r\n                var left = leftArray[lindex];\r\n                var found = false;\r\n                for (var rindex = 0; rindex < addedItems.length; rindex++) {\r\n                    var right = addedItems[rindex];\r\n                    if (this.getDifference(left, right, name, keyExtractors).changeType === DiffType.Unchanged) {\r\n                        unchangedItems.push(right);\r\n                        addedItems.splice(rindex, 1);\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    removedItems.push(left);\r\n                }\r\n            }\r\n        }","mutatedLines":"        else {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"lindex >= leftArray.length","location":{"start":{"line":164,"column":33},"end":{"line":164,"column":58}},"range":[5989,6014],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"            for (var lindex = 0; lindex < leftArray.length; lindex++) {","mutatedLines":"            for (var lindex = 0; lindex >= leftArray.length; lindex++) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"UpdateOperator","status":1,"replacement":"lindex--","location":{"start":{"line":164,"column":60},"end":{"line":164,"column":68}},"range":[6016,6024],"testsRan":["Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"            for (var lindex = 0; lindex < leftArray.length; lindex++) {","mutatedLines":"            for (var lindex = 0; lindex < leftArray.length; lindex--) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"lindex <= leftArray.length","location":{"start":{"line":171,"column":33},"end":{"line":171,"column":58}},"range":[6202,6227],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"            for (var lindex = 0; lindex < leftArray.length; lindex++) {","mutatedLines":"            for (var lindex = 0; lindex <= leftArray.length; lindex++) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":171,"column":70},"end":{"line":186,"column":13}},"range":[6239,6901],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"            for (var lindex = 0; lindex < leftArray.length; lindex++) {\r\n                var left = leftArray[lindex];\r\n                var found = false;\r\n                for (var rindex = 0; rindex < addedItems.length; rindex++) {\r\n                    var right = addedItems[rindex];\r\n                    if (this.getDifference(left, right, name, keyExtractors).changeType === DiffType.Unchanged) {\r\n                        unchangedItems.push(right);\r\n                        addedItems.splice(rindex, 1);\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    removedItems.push(left);\r\n                }\r\n            }","mutatedLines":"            for (var lindex = 0; lindex < leftArray.length; lindex++) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"lindex >= leftArray.length","location":{"start":{"line":171,"column":33},"end":{"line":171,"column":58}},"range":[6202,6227],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"            for (var lindex = 0; lindex < leftArray.length; lindex++) {","mutatedLines":"            for (var lindex = 0; lindex >= leftArray.length; lindex++) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":171,"column":33},"end":{"line":171,"column":58}},"range":[6202,6227],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"            for (var lindex = 0; lindex < leftArray.length; lindex++) {","mutatedLines":"            for (var lindex = 0; false; lindex++) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":174,"column":37},"end":{"line":174,"column":63}},"range":[6362,6388],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"                for (var rindex = 0; rindex < addedItems.length; rindex++) {","mutatedLines":"                for (var rindex = 0; false; rindex++) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"rindex >= addedItems.length","location":{"start":{"line":174,"column":37},"end":{"line":174,"column":63}},"range":[6362,6388],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"                for (var rindex = 0; rindex < addedItems.length; rindex++) {","mutatedLines":"                for (var rindex = 0; rindex >= addedItems.length; rindex++) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":174,"column":75},"end":{"line":182,"column":17}},"range":[6400,6790],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"                for (var rindex = 0; rindex < addedItems.length; rindex++) {\r\n                    var right = addedItems[rindex];\r\n                    if (this.getDifference(left, right, name, keyExtractors).changeType === DiffType.Unchanged) {\r\n                        unchangedItems.push(right);\r\n                        addedItems.splice(rindex, 1);\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }","mutatedLines":"                for (var rindex = 0; rindex < addedItems.length; rindex++) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":2,"replacement":"rindex <= addedItems.length","location":{"start":{"line":174,"column":37},"end":{"line":174,"column":63}},"range":[6362,6388],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"                for (var rindex = 0; rindex < addedItems.length; rindex++) {","mutatedLines":"                for (var rindex = 0; rindex <= addedItems.length; rindex++) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":176,"column":24},"end":{"line":176,"column":110}},"range":[6480,6566],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"                    if (this.getDifference(left, right, name, keyExtractors).changeType === DiffType.Unchanged) {","mutatedLines":"                    if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":176,"column":24},"end":{"line":176,"column":110}},"range":[6480,6566],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"                    if (this.getDifference(left, right, name, keyExtractors).changeType === DiffType.Unchanged) {","mutatedLines":"                    if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"this.getDifference(left, right, name, keyExtractors).changeType !== DiffType.Unchanged","location":{"start":{"line":176,"column":24},"end":{"line":176,"column":110}},"range":[6480,6566],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"                    if (this.getDifference(left, right, name, keyExtractors).changeType === DiffType.Unchanged) {","mutatedLines":"                    if (this.getDifference(left, right, name, keyExtractors).changeType !== DiffType.Unchanged) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":176,"column":112},"end":{"line":181,"column":21}},"range":[6568,6771],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"                    if (this.getDifference(left, right, name, keyExtractors).changeType === DiffType.Unchanged) {\r\n                        unchangedItems.push(right);\r\n                        addedItems.splice(rindex, 1);\r\n                        found = true;\r\n                        break;\r\n                    }","mutatedLines":"                    if (this.getDifference(left, right, name, keyExtractors).changeType === DiffType.Unchanged) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":183,"column":20},"end":{"line":183,"column":26}},"range":[6812,6818],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"                if (!found) {","mutatedLines":"                if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":183,"column":28},"end":{"line":185,"column":17}},"range":[6820,6886],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"                if (!found) {\r\n                    removedItems.push(left);\r\n                }","mutatedLines":"                if (!found) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":183,"column":20},"end":{"line":183,"column":26}},"range":[6812,6818],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result"],"originalLines":"                if (!found) {","mutatedLines":"                if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":189,"column":12},"end":{"line":189,"column":35}},"range":[6972,6995],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (addedItems.length !== 0) {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":189,"column":12},"end":{"line":189,"column":35}},"range":[6972,6995],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (addedItems.length !== 0) {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"addedItems.length === 0","location":{"start":{"line":189,"column":12},"end":{"line":189,"column":35}},"range":[6972,6995],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (addedItems.length !== 0) {","mutatedLines":"        if (addedItems.length === 0) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":189,"column":37},"end":{"line":191,"column":9}},"range":[6997,7064],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (addedItems.length !== 0) {\r\n            changeType = changeType | DiffType.Added;\r\n        }","mutatedLines":"        if (addedItems.length !== 0) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":192,"column":12},"end":{"line":192,"column":37}},"range":[7078,7103],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (removedItems.length !== 0) {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"removedItems.length === 0","location":{"start":{"line":192,"column":12},"end":{"line":192,"column":37}},"range":[7078,7103],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (removedItems.length !== 0) {","mutatedLines":"        if (removedItems.length === 0) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":192,"column":12},"end":{"line":192,"column":37}},"range":[7078,7103],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (removedItems.length !== 0) {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":195,"column":12},"end":{"line":195,"column":37}},"range":[7188,7213],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (changedItems.length !== 0) {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":192,"column":39},"end":{"line":194,"column":9}},"range":[7105,7174],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (removedItems.length !== 0) {\r\n            changeType = changeType | DiffType.Removed;\r\n        }","mutatedLines":"        if (removedItems.length !== 0) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":195,"column":39},"end":{"line":197,"column":9}},"range":[7215,7285],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (changedItems.length !== 0) {\r\n            changeType = changeType | DiffType.Modified;\r\n        }","mutatedLines":"        if (changedItems.length !== 0) {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"true","location":{"start":{"line":195,"column":12},"end":{"line":195,"column":37}},"range":[7188,7213],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (changedItems.length !== 0) {","mutatedLines":"        if (true) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BinaryOperator","status":1,"replacement":"changedItems.length === 0","location":{"start":{"line":195,"column":12},"end":{"line":195,"column":37}},"range":[7188,7213],"testsRan":["Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (changedItems.length !== 0) {","mutatedLines":"        if (changedItems.length === 0) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"RemoveConditionals","status":1,"replacement":"false","location":{"start":{"line":73,"column":12},"end":{"line":73,"column":33}},"range":[2423,2444],"testsRan":["Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (leftType !== \"object\") {","mutatedLines":"        if (false) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":73,"column":35},"end":{"line":79,"column":9}},"range":[2446,2650],"testsRan":["Generic difference calculator verifies that two objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in the same order result in an unchanged result","Generic difference calculator verifies that two objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two complex objects with same properties in different order result in an unchanged result","Generic difference calculator verifies that two objects with same properties, different values in the same order result in an Modified result","Generic difference calculator verifies that two complex objects with same properties with different outer values in different order result in an correct modified result","Generic difference calculator verifies that two complex objects with same properties with different inner values in different order result in an correct modified result","Generic difference calculator verifies that two objects with different properties result in an Modified result","Generic difference calculator verifies that array / object comparison results in a TypeChanged result","Generic difference calculator verifies that object / array comparison results in a TypeChanged result","Generic difference calculator verifies that two arrays with same primitive values result in an unchanged result","Generic difference calculator verifies that two arrays, where the old has less elements will result in a Added result","Generic difference calculator verifies that two arrays, where the old has more elements will result in a Removed result","Generic difference calculator verifies that two arrays with same complex values result in an unchanged result","Generic difference calculator verifies that two arrays with same complex values (different property order) result in an unchanged result","Generic difference calculator verifies that two arrays with different primitive values result in an modified result","Generic difference calculator verifies that two arrays with payload changes detects changes using key extractors","Generic difference calculator verifies that two objects with array properties with payload changes detects changes using key extractors"],"originalLines":"        if (leftType !== \"object\") {\r\n            return {\r\n                oldValue: left,\r\n                newValue: right,\r\n                changeType: (left === right) ? DiffType.Unchanged : DiffType.Modified\r\n            };\r\n        }","mutatedLines":"        if (leftType !== \"object\") {\n}"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"UpdateOperator","status":3,"replacement":"lindex--","location":{"start":{"line":171,"column":60},"end":{"line":171,"column":68}},"range":[6229,6237],"testsRan":[],"originalLines":"            for (var lindex = 0; lindex < leftArray.length; lindex++) {","mutatedLines":"            for (var lindex = 0; lindex < leftArray.length; lindex--) {"},{"sourceFilePath":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","mutatorName":"UpdateOperator","status":3,"replacement":"rindex--","location":{"start":{"line":174,"column":65},"end":{"line":174,"column":73}},"range":[6390,6398],"testsRan":[],"originalLines":"                for (var rindex = 0; rindex < addedItems.length; rindex++) {","mutatedLines":"                for (var rindex = 0; rindex < addedItems.length; rindex--) {"}]