[{"path":"C:\\Source\\Demos\\testing-javascript\\mutations\\groupby.js","content":"if (!Array.prototype.groupBy) {\r\n    Array.prototype.groupBy = function (keySelector) {\r\n        var result = [];\r\n        var array = this;\r\n        this.forEach(function (item, index) {\r\n            var key = keySelector(item, index);\r\n            var keyItem = result.find(function (r) { return r.key === key; });\r\n            if (!keyItem) {\r\n                result.push({\r\n                    key: key,\r\n                    items: [item]\r\n                });\r\n            }\r\n            else {\r\n                keyItem.items.push(item);\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n}\r\nif (!Array.prototype.groupReduce) {\r\n    Array.prototype.groupReduce = function (keySelector, reducer, initial) {\r\n        var result = [];\r\n        var array = this;\r\n        var initFunc;\r\n        if (Array.isArray(initial)) {\r\n            initFunc = function () { return initial.slice(); };\r\n        }\r\n        else if (typeof (initial) === \"object\" && initial != null) {\r\n            initFunc = function () { return Object.assign({}, initial); };\r\n        }\r\n        else {\r\n            initFunc = function () { return initial; };\r\n        }\r\n        this.forEach(function (item, index) {\r\n            var key = keySelector(item, index);\r\n            var keyItem = result.find(function (r) { return r.key === key; });\r\n            if (!keyItem) {\r\n                keyItem = {\r\n                    key: key,\r\n                    value: initFunc()\r\n                };\r\n                result.push(keyItem);\r\n            }\r\n            keyItem.value = reducer(keyItem.value, item);\r\n            ;\r\n        });\r\n        return result;\r\n    };\r\n}\r\n"},{"path":"C:\\Source\\Demos\\testing-javascript\\mutations\\generic-diff.js","content":"var exports = {};\r\nvar DiffType;\r\n(function (DiffType) {\r\n    DiffType[DiffType[\"Unchanged\"] = 0] = \"Unchanged\";\r\n    DiffType[DiffType[\"Added\"] = 1] = \"Added\";\r\n    DiffType[DiffType[\"Removed\"] = 2] = \"Removed\";\r\n    DiffType[DiffType[\"Modified\"] = 4] = \"Modified\";\r\n    DiffType[DiffType[\"TypeChanged\"] = 8] = \"TypeChanged\";\r\n    DiffType[DiffType[\"Uncomparable\"] = 1048576] = \"Uncomparable\";\r\n})(DiffType = exports.DiffType || (exports.DiffType = {}));\r\n\r\nvar GenericDiff = (function () {\r\n    function GenericDiff() {\r\n    }\r\n    GenericDiff.getDifference = function (oldValue, newValue, name, keyExtractors) {\r\n        var left = oldValue;\r\n        var right = newValue;\r\n        // handle undefined values\r\n        if (left === undefined) {\r\n            if (right === undefined) {\r\n                return {\r\n                    oldValue: undefined,\r\n                    newValue: undefined,\r\n                    changeType: DiffType.Unchanged\r\n                };\r\n            }\r\n            return {\r\n                oldValue: undefined,\r\n                newValue: right,\r\n                changeType: right === null ? DiffType.Modified : DiffType.Added\r\n            };\r\n        }\r\n        if (right === undefined) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: undefined,\r\n                changeType: left === null ? DiffType.Modified : DiffType.Removed\r\n            };\r\n        }\r\n        // handle null values\r\n        if (left === null) {\r\n            if (right === null) {\r\n                return {\r\n                    oldValue: null,\r\n                    newValue: null,\r\n                    changeType: DiffType.Unchanged\r\n                };\r\n            }\r\n            return {\r\n                oldValue: null,\r\n                newValue: right,\r\n                changeType: DiffType.Added\r\n            };\r\n        }\r\n        if (right === null) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: null,\r\n                changeType: DiffType.Removed\r\n            };\r\n        }\r\n        // handle base types\r\n        var leftType = typeof left;\r\n        var rightType = typeof right;\r\n        if (leftType !== rightType) {\r\n            return {\r\n                oldValue: oldValue,\r\n                newValue: newValue,\r\n                changeType: DiffType.TypeChanged\r\n            };\r\n        }\r\n        // are they primitives?\r\n        if (leftType !== \"object\") {\r\n            return {\r\n                oldValue: left,\r\n                newValue: right,\r\n                changeType: (left === right) ? DiffType.Unchanged : DiffType.Modified\r\n            };\r\n        }\r\n        // base case - are their serializations equal\r\n        var leftJson = JSON.stringify(left);\r\n        var rightJson = JSON.stringify(right);\r\n        if (leftJson === rightJson) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: right,\r\n                changeType: DiffType.Unchanged\r\n            };\r\n        }\r\n        // the values are objects, and they have different serializations\r\n        // are they arrays?\r\n        if (Array.isArray(left)) {\r\n            if (Array.isArray(right)) {\r\n                return (this.getArrayDifference(left, right, name, keyExtractors));\r\n            }\r\n            else {\r\n                return {\r\n                    oldValue: left,\r\n                    newValue: right,\r\n                    changeType: DiffType.TypeChanged\r\n                };\r\n            }\r\n        }\r\n        if (Array.isArray(right)) {\r\n            return {\r\n                oldValue: left,\r\n                newValue: right,\r\n                changeType: DiffType.TypeChanged\r\n            };\r\n        }\r\n        // compare object properties by name\r\n        var allKeyNames = Object.keys(left).concat(Object.keys(right));\r\n        var result = {\r\n            oldValue: left,\r\n            newValue: right,\r\n            changeType: DiffType.Uncomparable\r\n        };\r\n        for (var index = 0; index < allKeyNames.length; index += 1) {\r\n            var propName = allKeyNames[index];\r\n            var diff = this.getDifference(left[propName], right[propName], propName, keyExtractors);\r\n            if (diff.changeType !== DiffType.Unchanged) {\r\n                result[propName] = diff;\r\n            }\r\n        }\r\n        // are there any changes\r\n        if (allKeyNames.some(function (key) { return result[key] && result[key].changeType !== DiffType.Unchanged; })) {\r\n            result.changeType = DiffType.Modified;\r\n            return result;\r\n        }\r\n        return {\r\n            oldValue: left,\r\n            newValue: right,\r\n            changeType: DiffType.Unchanged\r\n        };\r\n    };\r\n    GenericDiff.getArrayDifference = function (leftArray, rightArray, name, keyExtractors) {\r\n        var addedItems = rightArray.slice();\r\n        var unchangedItems = [];\r\n        var removedItems = [];\r\n        var changedItems = [];\r\n        if (keyExtractors && keyExtractors[name]) {\r\n            // we're using key matching\r\n            var keyGetter_1 = keyExtractors[name];\r\n            var _loop_1 = function (lindex) {\r\n                var litem = leftArray[lindex];\r\n                var lkey = keyGetter_1(litem);\r\n                var rindex = addedItems.findIndex(function (r) { return keyGetter_1(r) === lkey; });\r\n                var ritem = addedItems[rindex];\r\n                if (!ritem) {\r\n                    removedItems.push(litem);\r\n                }\r\n                else {\r\n                    addedItems.splice(rindex, 1);\r\n                    var diff = this_1.getDifference(litem, ritem, name, keyExtractors);\r\n                    if (diff.changeType === DiffType.Unchanged) {\r\n                        unchangedItems.push(ritem);\r\n                    }\r\n                    else {\r\n                        changedItems.push(diff);\r\n                    }\r\n                }\r\n            };\r\n            var this_1 = this;\r\n            for (var lindex = 0; lindex < leftArray.length; lindex++) {\r\n                _loop_1(lindex);\r\n            }\r\n            ;\r\n        }\r\n        else {\r\n            // we're using full object matching\r\n            for (var lindex = 0; lindex < leftArray.length; lindex++) {\r\n                var left = leftArray[lindex];\r\n                var found = false;\r\n                for (var rindex = 0; rindex < addedItems.length; rindex++) {\r\n                    var right = addedItems[rindex];\r\n                    if (this.getDifference(left, right, name, keyExtractors).changeType === DiffType.Unchanged) {\r\n                        unchangedItems.push(right);\r\n                        addedItems.splice(rindex, 1);\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    removedItems.push(left);\r\n                }\r\n            }\r\n        }\r\n        var changeType = DiffType.Unchanged;\r\n        if (addedItems.length !== 0) {\r\n            changeType = changeType | DiffType.Added;\r\n        }\r\n        if (removedItems.length !== 0) {\r\n            changeType = changeType | DiffType.Removed;\r\n        }\r\n        if (changedItems.length !== 0) {\r\n            changeType = changeType | DiffType.Modified;\r\n        }\r\n        return {\r\n            oldValue: leftArray,\r\n            newValue: rightArray,\r\n            addedItems: addedItems,\r\n            removedItems: removedItems,\r\n            unchangedItems: unchangedItems,\r\n            changedItems: changedItems,\r\n            changeType: changeType\r\n        };\r\n    };\r\n    return GenericDiff;\r\n}());\r\nexports.GenericDiff = GenericDiff;\r\n"}]